= Extending jsoSchema
Marco Baringer <mb@bese.it>
v2, Winter 2014

(NB: This is all out of data, while the underlying concept,
continuation passing style, is still used the internal api has changed
radically in v2).

If your schema can be expressed as a singe condition on a single
value, just use the Condition schema and be done with it. Otherwise,
read on.

A jso schema is a function which takes three arguments (its return
value is unspecified, and no piece of the jsoSchema depends on the
schema's return value):

[source,javascript]
----
var schema = function (value, pass, fail) { ... }
----

+value+ is, surprisingly enough, the javascript object we want to test
the schema on. +pass+ is a function, which itself takes no arguments,
and should be called if +value+ matches (or passes or satisifies or
whatever) the schema. +fail+ is a function which should be called if
+value+ does not pass the schema.

so, as an example, a schema to check if a value is even would look
like this:

[source,javascript]
----
var isEven = function (value, pass, fail) {
  if (value % 2 == 0) {
    pass();
  } else 
    fail(value, " is not divisible by 2");
  }
}
----

It's important here to notice two things:

1. we tell the rest of the validator that we've matched (or not) by
   calling the function pass (or fail).

2. our schema does not do anything after having called pass or fail.

3. (this is something you should know but it's not obvious from the
   above code) a schema function may be called multiple times on the
   same value.

The reason for these constraints are slightly beyond the scope of this
README (google "Continuation Passing Style" if you're really curious),
but it is important to keep them present when writing new schema
generator functions.

As a slightly more complicated example, let's try and implement a
schema function which checks if its value is an array of unique
items. we'll start, just because this is a README, with the code which
does exactly what we'd like to check:

[source,javascript]
----
var uniqueElements = function (array) {
  var i, set = { };
  for (i = 0; i < array.length; i++) {
    if (set[array[i]]) {
      return false;
    }
    set[array[i]] = true;
  }
  return true;
}
----

This is a, very simple, function which returns true if all the
elements of an array a unique (as per +===+) and false otherwise. NB:
We've implicitly decided that a zero length array is unique.

As a first attempt, we'll just change this function and add in the
parameters +pass+ and +fail+, and call +pass+ when we have returned
true and call +fail+ when we would have returned +false+:

[source,javascript]
----
var uniqueElements = function (array, pass, fail) {
  var i, set = { };
  for (i = 0; i < array.length; i++) {
    if (set[array[i]]) {
      fail(); // was return false
    }
    set[array[i]] = true;
  }
  pass(); // was return true
}
----

The problem with this implementation is that it will call fail once
for every duplicate element, and then, no matter what, it'll call pass
at the end. that obviously doesn't make any sense (and, if our
pass/fail function do logging or have side effects we'll be
introducing bugs), so let's change it to:

the thing to realize is that a takes, as an input parameter, a
function that it will call if the value checks. that's where we can
put our logic for calling b. so instead of this:

[source,javascript]
----
var uniqueElements = function (array, pass, fail) {
  var i, set = { };
  for (i = 0; i < array.length; i++) {
    if (set[array[i]]) {
      return fail(); // was return false
    }
    set[array[i]] = true;
  }
  return pass(); // was return true
}
----

by using the return statement we're stopping the execution of this
function as soon as we find a single duplicate, and that's exactly
what we want. we don't know what value fail or pass, and therefore
function, actually return, but, by definition of the schema api, it
doesn't matter.

Let's take another, slightly more complicated (at least conceptually)
example: negation. we want a schema function which takes as input a
schema (so this is actually a schema combiner or generator) and
returns a schema that return the opposite of the input schema,
procedurally, we want this:

[source,javascript]
----
var negate = function (schema) {
  return function (value, pass, fail) {
    if ( ! schema(value) ) { 
      pass()
    } else {
      fail()
    }
  }
}
----

this code, as written, has a few problems:

1. schema, by definition of the schema api, doesn't return a value, so
   we can't test its return value for true/false ness.

2. schema, also by definition, takes three arguments, a value, a pass
   function and a fail function, but here we're only passing in the
   value. what could we pass to schema as its pass or fail function?
   how can we pass in the then branch of the if we're in? does that
   even make any sense? obviously there's a problem here.

We need to look at this problem differently (and, if you understand
continuations or continuation passing style, this should be
obvious). The thing to notice is that we're already given a schema,
and we don't have any extra checks of our own, we just want to do
something differently depending on whether or not schema matches;
well, it turns out that we can just use schema's pass and fail
arguments to do exactly that:

[source,javascript]
----
var negate = function (schema) {
  return function (value, pass, fail) {
    schema(value,
           function () { fail(); },
           function () { pass(); });
}
----

so now +schema+ will do whatever it normally does, and if that passes
it'll call our fail function, if +schema+ fails it'll call our +pass+
function. perfect. finally, we could simplify the code a little bit:

[source,javascript]
----
var negate = function (schema) {
  return function (value, pass, fail) {
    schema(value, fail, pass);
}
----

now, one last example, xor (given a list of schema, match exactly
one). as with negate we'll start with the simple (but wrong) version:

[source,javascript]
----
var xor = function (schemas) {
  return function (value, pass, fail) {
    var i, num_matches = 0;
    for (i = 0; i < schema.length; i++) {
      if (schemas[i](value)) {
        num_matches++;
      }
    }
    return num_matches == 1;
  }
}
----

this one is a bit more complicated, we need to test all the schemas on
our value, we need to count how many match, and, finally, if exactly
one of them matches then we pass, other wise we fail. we need to do
this but the only control flow tool we have is the function(s) we pass
to the schemas, and we can't pass a bit of a loop (we could if we had
call_with_current_continuation, but we don't), but let's try it and
see how it looks:

[source,javascript]
----
var xor = function (schemas) {
  return function (value, pass, fail) {
    
    var i, num_matches = 0;
    for (i = 0; i < schema.length; i++) {
      schemas[i](value, 
                 function () { num_matches++; }, 
                 function () { });
    }
    num_matches == 1 ? pass() : fail();
  }
}
----

seems reasonable enough, call each schema on the value, if the schema
passes tell it to increment num_matches, otherwise do
nothing. finally, if exactly one schema matched, call pass, otherwise
call fail. this implementation actually works in a lot of cases, but
there are certain cases, and while it's pretty uncommon when you do
need it that's the only thing that will work, where we want to go back
and try to fail (or pass) where we'd previously passed (or failed) so
that a later schema can pass (or fail) and the whole thing can pass.

for that reason we need to restructure that code so that whenever our
xor functions call either pass, fail _or_ a schema, that's the last
thing it does:

[source,javascript]
----
var xor = function (schemas) {
  return function (value, pass, fail) {
    var loop = function (i, num_matches) {
      if (i == schemas.length) {
        num_matches == 1 ? pass() : fail();
      } else {
        schemas[i](value,
                   function () { loop(i + 1, num_matches + 1); },
                   function () { loop(i + 1, num_matches); });
      }
    };
    loop(0, 0);
  }
}
----

This has gone way beyond what should go in a README, so we're just
going to leave it there. Submit an issue on github if you have some
suggestions as to how to explain this corner of jsoSchema, thanks.
